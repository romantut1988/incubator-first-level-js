[{"D:\\incubator-first-level-js\\src\\index.tsx":"1","D:\\incubator-first-level-js\\src\\redux\\currencyReducer.ts":"2","D:\\incubator-first-level-js\\src\\redux\\actions.ts":"3","D:\\incubator-first-level-js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"4","D:\\incubator-first-level-js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx":"5","D:\\incubator-first-level-js\\src\\redux\\state.ts":"6","D:\\incubator-first-level-js\\src\\lessons\\lesson2\\lesson2.ts":"7","D:\\incubator-first-level-js\\src\\lessons\\lesson3\\lesson_3.ts":"8","D:\\incubator-first-level-js\\src\\lessons\\lesson3\\API.ts":"9","D:\\incubator-first-level-js\\src\\lessons\\lesson3\\Lesson3.tsx":"10"},{"size":319,"mtime":1609752862000,"results":"11","hashOfConfig":"12"},{"size":2493,"mtime":1650302518176,"results":"13","hashOfConfig":"12"},{"size":1476,"mtime":1650293207287,"results":"14","hashOfConfig":"12"},{"size":3871,"mtime":1648744716000,"results":"15","hashOfConfig":"12"},{"size":6249,"mtime":1650301344164,"results":"16","hashOfConfig":"12"},{"size":288,"mtime":1650300954840,"results":"17","hashOfConfig":"12"},{"size":7689,"mtime":1650384970697,"results":"18","hashOfConfig":"12"},{"size":10432,"mtime":1650969318307,"results":"19","hashOfConfig":"12"},{"size":326,"mtime":1601709172000,"results":"20","hashOfConfig":"12"},{"size":1599,"mtime":1650965102351,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"hl3bub",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\incubator-first-level-js\\src\\index.tsx",[],["46","47"],"D:\\incubator-first-level-js\\src\\redux\\currencyReducer.ts",[],"D:\\incubator-first-level-js\\src\\redux\\actions.ts",[],"D:\\incubator-first-level-js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],"D:\\incubator-first-level-js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx",["48","49","50"],"import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport {CurrencyState, CurrencyType, selectAllCurrencyState} from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\n\r\n// const CurrencyEContainer: React.FC<TProps> = props => {\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     setCurrencyAmount,\r\n    //     setAction,\r\n    //     changeCurrency,\r\n    // } = props;\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     ChangeActionAC,\r\n    //     ChangeCurrencyFieldAC,\r\n    //     ChangeCurrentCurrencyAC,\r\n    // } = props;\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    // } = props;\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>();\r\n    const {\r\n        currentCurrency,\r\n        amountOfCurrency,\r\n        amountOfBYN,\r\n        currencies,\r\n        isBuying,\r\n    } = useSelector(selectAllCurrencyState);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    // ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    // ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n        // e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n        e.currentTarget.dataset.action === 'buy'\r\n            ? dispatch(ChangeActionAC(true))\r\n            : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        // e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n        // e.currentTarget.dataset.currency && ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\ntype StateType = {\r\n    currency: CurrencyState\r\n}\r\n\r\n//const mapStateToProps = ( { currency } : { currency: CurrencyState } ): CurrencyState => {\r\n// const mapStateToProps = ( { currency } : StateType ): CurrencyState => {\r\n//     return {\r\n//         currencies: currency.currencies,\r\n//         currentCurrency: currency.currentCurrency,\r\n//         isBuying: currency.isBuying,\r\n//         amountOfBYN: currency.amountOfBYN,\r\n//         amountOfCurrency: currency.amountOfCurrency,\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n//     return {\r\n//         setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n//             dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n//         },\r\n//         setAction(isBuying: boolean) {\r\n//             dispatch(ChangeActionAC(isBuying));\r\n//         },\r\n//         changeCurrency(currency: string) {\r\n//             dispatch(ChangeCurrentCurrencyAC(currency));\r\n//         },\r\n//     };\r\n// };\r\n\r\n// @ts-ignore\r\n//const connector = connect(mapStateToProps, mapDispatchToProps);\r\n// const connector = connect(mapStateToProps, {\r\n//     ChangeActionAC,\r\n//     ChangeCurrencyFieldAC,\r\n//     ChangeCurrentCurrencyAC,\r\n// });\r\n\r\n// const connector = connect(mapStateToProps, { });\r\n//\r\n// type TProps = ConnectedProps<typeof connector>;\r\n//\r\n// export default connector(CurrencyEContainer);\r\nexport default CurrencyEContainer\r\n\r\n",["51","52"],"D:\\incubator-first-level-js\\src\\redux\\state.ts",[],"D:\\incubator-first-level-js\\src\\lessons\\lesson2\\lesson2.ts",["53"],"D:\\incubator-first-level-js\\src\\lessons\\lesson3\\lesson_3.ts",["54"],"D:\\incubator-first-level-js\\src\\lessons\\lesson3\\API.ts",["55","56"],"import axios from 'axios';\r\n\r\nconst configOMB = {\r\n    baseURL: 'http://www.omdbapi.com',\r\n};\r\nconst key = '';\r\nconst axiosInstance = axios.create(configOMB);\r\n\r\nconst API = {\r\n    searchFilmsByTitle: (title: string) => {\r\n    },\r\n    searchFilmsByType: (title: string, type: string) => {\r\n    }\r\n};\r\n\r\n\r\nexport default API;\r\n","D:\\incubator-first-level-js\\src\\lessons\\lesson3\\Lesson3.tsx",["57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":11,"column":9,"nodeType":"65","messageId":"66","endLine":11,"endColumn":16},{"ruleId":"63","severity":1,"message":"67","line":11,"column":18,"nodeType":"65","messageId":"66","endLine":11,"endColumn":32},{"ruleId":"63","severity":1,"message":"68","line":122,"column":6,"nodeType":"65","messageId":"66","endLine":122,"endColumn":15},{"ruleId":"59","replacedBy":"69"},{"ruleId":"61","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":279,"column":1,"nodeType":"73","endLine":280,"endColumn":3},{"ruleId":"71","severity":1,"message":"72","line":337,"column":1,"nodeType":"73","endLine":337,"endColumn":25},{"ruleId":"63","severity":1,"message":"74","line":6,"column":7,"nodeType":"65","messageId":"66","endLine":6,"endColumn":10},{"ruleId":"63","severity":1,"message":"75","line":7,"column":7,"nodeType":"65","messageId":"66","endLine":7,"endColumn":20},{"ruleId":"63","severity":1,"message":"76","line":7,"column":26,"nodeType":"65","messageId":"66","endLine":7,"endColumn":41},{"ruleId":"63","severity":1,"message":"77","line":9,"column":32,"nodeType":"65","messageId":"66","endLine":9,"endColumn":53},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'ConnectedProps' is defined but never used.","'StateType' is defined but never used.",["78"],["79"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'key' is assigned a value but never used.","'axiosInstance' is assigned a value but never used.","'setSerachResult' is assigned a value but never used.","'setSerachResultByType' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]